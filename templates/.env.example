# .env.example - Template for Service Environment Variables
#
# This file documents all required environment variables for this service.
# NEVER commit actual secrets to git - only commit this template file.
#
# Instructions:
# 1. Copy this file to .env: cp .env.example .env
# 2. Retrieve secrets from Vaultwarden (see below)
# 3. Fill in the actual values in .env
# 4. Ensure .env is in .gitignore
#
# Generated: YYYY-MM-DD
# Service: [SERVICE_NAME]
# VM: [VM_NUMBER]

# ==============================================================================
# SECRETS - Stored in Vaultwarden
# ==============================================================================
# All secrets are stored in Vaultwarden under: vm-[VM]-[service]/
# Retrieve using: bw get password "secret-name"
#
# To retrieve all secrets for this service:
#   export BW_SESSION=$(bw unlock --raw)
#   API_KEY=$(bw get password "service-api-key")
#   DB_PASSWORD=$(bw get password "service-db-password")

# ------------------------------------------------------------------------------
# API Keys & Tokens
# ------------------------------------------------------------------------------

# Service API Key
# Vaultwarden: vm-XXX-service/service-api-key
# Used for: API authentication
SERVICE_API_KEY=your_api_key_here

# Admin Token
# Vaultwarden: vm-XXX-service/service-admin-token
# Used for: Administrative access
SERVICE_ADMIN_TOKEN=your_admin_token_here

# ------------------------------------------------------------------------------
# Database Credentials
# ------------------------------------------------------------------------------

# Database User
# Vaultwarden: vm-XXX-service/service-db-credentials (username field)
# Used for: Database connection
DB_USERNAME=service_user

# Database Password
# Vaultwarden: vm-XXX-service/service-db-credentials (password field)
# Used for: Database authentication
DB_PASSWORD=your_db_password_here

# Database Name
# Note: Not a secret, but included for completeness
DB_NAME=service_db

# Database Host
# Note: Not a secret - usually localhost or service name in docker-compose
DB_HOST=postgres

# Database Port
# Note: Not a secret
DB_PORT=5432

# ------------------------------------------------------------------------------
# External Service Credentials
# ------------------------------------------------------------------------------

# External API Key (e.g., TMDB, TVDB, etc.)
# Vaultwarden: external/service-name-api-key
# Used for: Third-party API access
EXTERNAL_API_KEY=your_external_api_key_here

# External Service URL
# Note: Usually not a secret unless it contains credentials
EXTERNAL_SERVICE_URL=https://api.example.com

# ------------------------------------------------------------------------------
# Encryption & Security
# ------------------------------------------------------------------------------

# Secret Key / Encryption Key
# Vaultwarden: vm-XXX-service/service-secret-key
# Used for: Session encryption, JWT signing, etc.
# Generate with: openssl rand -hex 32
SECRET_KEY=your_secret_key_here

# JWT Secret
# Vaultwarden: vm-XXX-service/service-jwt-secret
# Used for: JWT token signing
JWT_SECRET=your_jwt_secret_here

# ------------------------------------------------------------------------------
# Tunnel / VPN Credentials (if applicable)
# ------------------------------------------------------------------------------

# Pangolin Tunnel ID
# Vaultwarden: vm-XXX-service/pangolin-service-tunnel (NEWT_ID custom field)
# Used for: Pangolin tunnel authentication
NEWT_ID=your_newt_id_here

# Pangolin Tunnel Secret
# Vaultwarden: vm-XXX-service/pangolin-service-tunnel (password field)
# Used for: Pangolin tunnel authentication
NEWT_SECRET=your_newt_secret_here

# Pangolin Endpoint
# Note: Not a secret
PANGOLIN_ENDPOINT=https://pangolin.infinity-node.com

# ==============================================================================
# NON-SECRET CONFIGURATION
# ==============================================================================
# These values are safe to commit to git if needed

# ------------------------------------------------------------------------------
# Service Configuration
# ------------------------------------------------------------------------------

# Service Port
# Port the service listens on
SERVICE_PORT=8080

# Service Hostname
# Hostname for the service
SERVICE_HOSTNAME=service.local.infinity-node.com

# Log Level
# Options: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# ------------------------------------------------------------------------------
# Docker Configuration
# ------------------------------------------------------------------------------

# User ID for container
# Should match the host user for volume permissions
PUID=1000

# Group ID for container
# Should match the host group for volume permissions
PGID=1000

# Timezone
TZ=America/New_York

# ------------------------------------------------------------------------------
# Volume Paths
# ------------------------------------------------------------------------------

# Configuration directory
# Path to store service configuration
CONFIG_PATH=/home/evan/projects/infinity-node/stacks/service/config

# Data directory
# Path to store service data
DATA_PATH=/home/evan/projects/infinity-node/stacks/service/data

# Media paths (if applicable)
# Paths to media libraries
MOVIES_PATH=/mnt/nas/media/movies
TV_PATH=/mnt/nas/media/tv
MUSIC_PATH=/mnt/nas/media/music

# ==============================================================================
# DEPLOYMENT NOTES
# ==============================================================================

# Retrieving Secrets from Vaultwarden:
#
# 1. Ensure Bitwarden CLI is configured:
#    bw config server http://192.168.86.249:8111
#
# 2. Login and unlock:
#    bw login
#    export BW_SESSION=$(bw unlock --raw)
#
# 3. Retrieve secrets:
#    SERVICE_API_KEY=$(bw get password "service-api-key")
#    DB_PASSWORD=$(bw get password "service-db-credentials")
#
# 4. Create .env file:
#    cat > .env <<EOF
#    SERVICE_API_KEY=$SERVICE_API_KEY
#    DB_PASSWORD=$DB_PASSWORD
#    # ... other variables ...
#    EOF
#
# 5. Verify .env is gitignored:
#    git check-ignore .env

# ==============================================================================
# SECURITY CHECKLIST
# ==============================================================================
#
# Before deploying, verify:
#
# ☐ All secrets are stored in Vaultwarden
# ☐ .env file is NOT committed to git
# ☐ .env file has restrictive permissions: chmod 600 .env
# ☐ No secrets in docker-compose.yml
# ☐ No secrets in shell history (use variables)
# ☐ Service-specific secrets documented in README.md
# ☐ Vaultwarden entries have custom fields (vm, service, env_var_name)
# ☐ Backup of .env file exists (encrypted)

# ==============================================================================
# REFERENCES
# ==============================================================================
#
# - Secret Management: docs/SECRET-MANAGEMENT.md
# - Security Agent: docs/agents/SECURITY.md
# - Architecture: docs/ARCHITECTURE.md
# - Service README: README.md (service-specific documentation)
